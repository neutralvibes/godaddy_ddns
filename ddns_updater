#!/bin/bash

# This script is used to check and update your GoDaddy DNS server to the IP address of your current internet connection.
# Special thanks to mfox for his ps script
# https://github.com/markafox/GoDaddy_Powershell_DDNS
#

cd "$(dirname "$0")" ; pwd -P

source config


getTime() {
    local NOW=$(date --rfc-3339=seconds)
    echo ${NOW:0:19}
}

#
# Time to Live min value 600
#
TTL="1800"

#
# Url of LIVE api
#
LIVE_API="https://api.godaddy.com/v1/domains/$DOMAIN_NAME/records"

#
# Url of TEST api
#
TEST_API="https://api.ote-godaddy.com/v1/domains/$DOMAIN_NAME/records"

#
# Max retries if GoDaddy call fails
#
RETRIES=3

#
# Time to sleep between GoDaddy retries (seconds)
#
RETRY_TIME=15


type="A"			# Record type A, CNAME, MX, etc.
port="1"            # Required port, Min value 1
weight="1"          # Required weight, Min value 1

FULL_NAME=${DOMAIN_RECORD}.${DOMAIN_NAME}

ON_CHANGE_FILE=./on_change
ON_FAIL_FILE=./on_fail
LOG_FILE=ipreport.log

usage() {
echo "
godaddy_dns_updater:

Updates a Godaddy hosted domain name record with a public ip


usage:
    run		- Check and update
    run-silent	- Check and update without mesages
"
    exit 0
}

[[ -z $1 ]] && usage

if [ $1 == 'run-silent' ]; then
    silent=1
elif [ $1 != 'run' ]; then
    usage
fi

msg () {
    [ -z $silent ] && echo "$@"
}

#
# Send a message to the screen & system log
_L () {
    msg $@
    echo "$(getTime) - $@" >> $LOG_FILE
    logger "godaddy_ddns_updater: $@"
}

#
# Exexcute the on_fail file
failed () {
    _L ERROR $@
    [[ ! -z "$ON_FAIL_FILE" ]] && $ON_FAIL_FILE "$@"
    exit 1
}

if [ $LIVE_MODE == 1 ]; then
	key=$LIVE_KEY
	secret=$LIVE_SECRET
	apiUrl=$LIVE_API
	msg "Using LIVE mode: $apiUrl"
else
	key=$TEST_KEY
	secret=$TEST_SECRET
	apiUrl=$TEST_API
	msg "Using TEST mode: $apiUrl"
fi

if [[ -z $key ]]; then
	_L "GoDaddy key is missing"
	exit 1
fi

if [[ -z $secret ]]; then
	_L "GoDaddy secret is missing"
	exit 1
fi


headers="Authorization: sso-key $key:$secret"

_L "Checking for changes"

getDaddyData () {

    local ATTEMPT=0
    msg "Getting info for $DOMAIN_RECORD.$DOMAIN_NAME from daddy url $apiUrl"

    while [ $ATTEMPT -lt $RETRIES ]
    do
        DADDY_DATA=$(curl -s -X GET -H "$headers" \
            "$apiUrl/$type/$DOMAIN_RECORD")
        
        #[[ 0 != $? ]] && failed "Failed to get data from Godaddy for $FULL_NAME"

        msg "Get external ip from $EXTERNAL_IP_PROVIDER"
        DNS_IP=$(echo $DADDY_DATA | grep -oE "\b([0-9]{1,3}\.){3}[0-9]{1,3}\b")

        if [[ -z $DNS_IP ]]; then
            local tmp=$(($RETRIES - $ATTEMPT))
            _L ERROR "Unable to get data from Godaddy, retries left: $tmp"
            ((ATTEMPT+=1))
        else
            break
        fi
        sleep $RETRY_TIME
    done

    # If we get here an still no result, we totally failed
    [[ -z $DNS_IP ]] && failed "Failed to get $FULL_NAME from Godaddy $DADDY_DATA"
}

getDaddyData

msg "${FULL_NAME} ip = " $DNS_IP

# Get public ip address there are several websites that can do this.

CURRENT_IP=$(get_external_IP)
[[ -z $CURRENT_IP ]] && failed "Failed to get external ip"

msg "currentIp:" $CURRENT_IP

# regex for ipv4 test
validIp="^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$"

if ! [[ $CURRENT_IP =~ $validIp ]]; then
	failed "Could not obtain valid connection ip from $EXTERNAL_IP_PROVIDER"
fi

if [[ "$DNS_IP" != "$CURRENT_IP" ]]; then

    _L "ip changed, updating from $DNS_IP to $CURRENT_IP"

    curl -X PUT "$apiUrl/$type/$DOMAIN_RECORD" \
        -H "accept: application/json" \
        -H "Content-Type: application/json" \
        -H "$headers" \
        -d "[ { \"data\": \"$CURRENT_IP\", \"port\": $port, \"priority\": 0, \"protocol\": \"string\", \"service\": \"string\", \"ttl\": $TTL, \"weight\": $weight } ]"

    [[ 0 != $? ]] && failed 'Failed to update new ip'

    echo "$NOW - From $DNS_IP to $CURRENT_IP2" >> $LOG_FILE

    [[ ! -z "$ON_CHANGE_FILE" ]] && $ON_CHANGE_FILE "$DNS_IP" "$CURRENT_IP"
fi

